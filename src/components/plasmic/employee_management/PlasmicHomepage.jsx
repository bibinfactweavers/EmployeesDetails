// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3UyqH456Q9795LJ8TKuZRx
// Component: Yhm7loIpLSI2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import About from "../../About"; // plasmic-import: Del_ILbcyv/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import { TableWrapper } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: LF24IrAPbeRN/codeComponent
import { TableColumn } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: qJFaUEuzy9Ae/codeComponent
import { TableValue } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: aOob39p1-Dlv/codeComponent
import Component from "../../Component"; // plasmic-import: lxUTBjvCVD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_employee_management.module.css"; // plasmic-import: 3UyqH456Q9795LJ8TKuZRx/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Yhm7loIpLSI2/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array("children");

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sgUmR
                  )}
                  href={"#"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__hixWx)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
                  />
                </a>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dzu93)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              itemsGap={8}
              menuItems={
                <React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__n6IzM
                    )}
                    href={"/"}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Home",
                      value: args.children
                    })}
                  </a>

                  <About
                    data-plasmic-name={"about"}
                    data-plasmic-override={overrides.about}
                    className={classNames("__wab_instance", sty.about)}
                  />

                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__e3Ahf
                    )}
                    href={`/contact`}
                    target={"_blank"}
                  >
                    {"Contact"}
                  </a>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__pqLmm)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/menu.svg"}
                />
              }
              responsiveBreakpoint={768}
            />

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___4AGrr)}>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Employees Data"}
                </div>
              </div>
            ) : null}

            <DataFetcher
              data-plasmic-name={"httpApiFetcher"}
              data-plasmic-override={overrides.httpApiFetcher}
              className={classNames("__wab_instance", sty.httpApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <ph.DataCtxReader>
                  {$ctx => "Error fetching data"}
                </ph.DataCtxReader>
              }
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
              }
              method={"GET"}
              noLayout={false}
              url={"https://reqres.in/api/users"}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <TableWrapper
                    data-plasmic-name={"antdTable"}
                    data-plasmic-override={overrides.antdTable}
                    className={classNames("__wab_instance", sty.antdTable)}
                    columns={
                      <React.Fragment>
                        <TableColumn
                          className={classNames(
                            "__wab_instance",
                            sty.antdTableColumn__mntzY
                          )}
                          columnTemplate={
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__y97Ax
                                  )}
                                >
                                  <TableValue
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdTableValue___9I8Bq
                                    )}
                                  />
                                </div>
                              )}
                            </ph.DataCtxReader>
                          }
                          dataIndex={"first_name"}
                          title={"Name"}
                        />

                        <TableColumn
                          className={classNames(
                            "__wab_instance",
                            sty.antdTableColumn___12Zdm
                          )}
                          columnTemplate={
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kal2O
                                  )}
                                >
                                  <TableValue
                                    className={classNames(
                                      "__wab_instance",
                                      sty.antdTableValue__e8UOi
                                    )}
                                  />
                                </div>
                              )}
                            </ph.DataCtxReader>
                          }
                          dataIndex={"email"}
                          title={"Email"}
                        />

                        <TableColumn
                          className={classNames(
                            "__wab_instance",
                            sty.antdTableColumn___1XYn1
                          )}
                          columnTemplate={
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__j9Mz
                                  )}
                                >
                                  <p.PlasmicImg
                                    data-plasmic-name={"img"}
                                    data-plasmic-override={overrides.img}
                                    alt={""}
                                    className={classNames(sty.img)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100px"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"auto"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return $ctx.currentColumn;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              )}
                            </ph.DataCtxReader>
                          }
                          dataIndex={"avatar"}
                          title={"Avatar"}
                        />
                      </React.Fragment>
                    }
                    items={(() => {
                      try {
                        return $ctx.fetchedData.data;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return [
                            {
                              name: "John Brown",
                              age: 19,
                              address: "New York No. 1 Lake Park",
                              tags: ["student", "developer"]
                            },
                            {
                              name: "Jim Green",
                              age: 42,
                              address: "London No. 1 Lake Park",
                              tags: ["teacher"]
                            },
                            {
                              name: "Joe Black",
                              age: 32,
                              address: "Sidney No. 1 Lake Park",
                              tags: ["cool", "teacher"]
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    pagination={true}
                    size={(() => {
                      try {
                        return $ctx.fetchedData.total;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "large";
                        }
                        throw e;
                      }
                    })()}
                  />
                )}
              </ph.DataCtxReader>
            </DataFetcher>
          </p.Stack>

          <Component
            data-plasmic-name={"component"}
            data-plasmic-override={overrides.component}
            className={classNames("__wab_instance", sty.component)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "navigationBar",
    "about",
    "text",
    "httpApiFetcher",
    "antdTable",
    "img",
    "component"
  ],

  section: [
    "section",
    "navigationBar",
    "about",
    "text",
    "httpApiFetcher",
    "antdTable",
    "img"
  ],

  navigationBar: ["navigationBar", "about"],
  about: ["about"],
  text: ["text"],
  httpApiFetcher: ["httpApiFetcher", "antdTable", "img"],
  antdTable: ["antdTable", "img"],
  img: ["img"],
  component: ["component"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    navigationBar: makeNodeComponent("navigationBar"),
    about: makeNodeComponent("about"),
    text: makeNodeComponent("text"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    antdTable: makeNodeComponent("antdTable"),
    img: makeNodeComponent("img"),
    component: makeNodeComponent("component"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
