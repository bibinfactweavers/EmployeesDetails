// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3UyqH456Q9795LJ8TKuZRx
// Component: QuyfF-a56y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDummy } from "./PlasmicGlobalVariant__Dummy"; // plasmic-import: pweOwfR4KY/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_employee_management.module.css"; // plasmic-import: 3UyqH456Q9795LJ8TKuZRx/projectcss
import sty from "./PlasmicEmployees.module.css"; // plasmic-import: QuyfF-a56y/css

export const PlasmicEmployees__VariantProps = new Array("unnamedVariant");

export const PlasmicEmployees__ArgProps = new Array();

function PlasmicEmployees__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    dummy: useDummy()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootglobal_dummy_aaAa]: hasVariant(
                globalVariants,
                "dummy",
                "aaAa"
              ),

              [sty.rootglobal_dummy_bbbb]: hasVariant(
                globalVariants,
                "dummy",
                "bbbb"
              ),

              [sty.rootglobal_dummy_ccccc]: hasVariant(
                globalVariants,
                "dummy",
                "ccccc"
              ),

              [sty.rootglobal_dummy_unnamedVariant]: hasVariant(
                globalVariants,
                "dummy",
                "unnamedVariant"
              ),

              [sty.rootunnamedVariant]: hasVariant(
                variants,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        />
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEmployees__ArgProps,
          internalVariantPropNames: PlasmicEmployees__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEmployees__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmployees";
  } else {
    func.displayName = `PlasmicEmployees.${nodeName}`;
  }
  return func;
}

export const PlasmicEmployees = Object.assign(
  // Top-level PlasmicEmployees renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicEmployees
    internalVariantProps: PlasmicEmployees__VariantProps,
    internalArgProps: PlasmicEmployees__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEmployees;
/* prettier-ignore-end */
